use std::fmt;

use crate::errors::{Result, TaError};
use crate::indicators::ExponentialMovingAverage;
use crate::{Close, Next, Period, Reset};
#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};

/// Quantitative Qualitative Estimation (QQE).
/// 
/// An indicator similar to SuperTrend that uses a smoothed RSI as a base for 
/// two trailing (upper & lower) bands. The band width is derived from a true range of
/// the smoothed RSI base which is then doubly smoothed with a Wilder's Smoothing Function.
/// 
/// Trading signals are generated by a combination of crossovers of the three levels/lines.
///
/// # Example
///
/// ```
/// use ta::indicators::QuantitativeQualitativeEstimation;
/// use ta::Next;
///
/// let mut qqe = QuantitativeQualitativeEstimation::new(3).unwrap();
/// assert_eq!(qqe.next(10.0), 10.0); // TODO: Fix these at the same time as the tests.
/// assert_eq!(qqe.next(13.0), 14.0);
/// assert_eq!(qqe.next(16.0), 18.0);
/// assert_eq!(qqe.next(14.0), 13.5);
/// ```
///
/// # Links
///
/// * [Quantitative Qualitative Estimation, Tradingpedia](https://www.tradingpedia.com/forex-trading-indicators/quantitative-qualitative-estimation)
/// * [Pinescript Implementation, TradingView](https://www.tradingview.com/script/IYfA9R2k-QQE-MT4/)
///

#[doc(alias = "QQE")]
#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
#[derive(Debug, Clone)]
pub struct QuantitativeQualitativeEstimation {
    period: usize,
}

impl QuantitativeQualitativeEstimation {
    pub fn new(period: usize) -> Result<Self> {
        match period {
            0 | 1 => Err(TaError::InvalidParameter),
            _ => Ok(Self {
                period,
            }),
        }
    }
}

impl Period for QuantitativeQualitativeEstimation {
    fn period(&self) -> usize {
        self.period
    }
}

impl Next<f64> for QuantitativeQualitativeEstimation {
    type Output = f64;

    fn next(&mut self, input: f64) -> Self::Output {
        input
    }
}

impl<T: Close> Next<&T> for QuantitativeQualitativeEstimation {
    type Output = f64;

    fn next(&mut self, input: &T) -> Self::Output {
        self.next(input.close())
    }
}

impl Reset for QuantitativeQualitativeEstimation {
    fn reset(&mut self) {
    }
}

impl Default for QuantitativeQualitativeEstimation {
    fn default() -> Self {
        Self::new(9).unwrap()
    }
}

impl fmt::Display for QuantitativeQualitativeEstimation {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "QQE({})", self.period)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::test_helper::*;

    test_indicator!(QuantitativeQualitativeEstimation);

    #[test]
    fn test_new() {
        assert!(QuantitativeQualitativeEstimation::new(0).is_err());
        assert!(QuantitativeQualitativeEstimation::new(1).is_err());
        assert!(QuantitativeQualitativeEstimation::new(2).is_ok());
        assert!(QuantitativeQualitativeEstimation::new(9).is_ok());
    }

    #[test]
    fn test_next() {
        let mut qqe = QuantitativeQualitativeEstimation::new(3).unwrap();

        assert_eq!(round(qqe.next(12.0)), 12.0);
        assert_eq!(round(qqe.next(9.0)), 8.0);
        assert_eq!(round(qqe.next(7.0)), 5.5);
        assert_eq!(round(qqe.next(13.0)), 15.667);

        let mut qqe = QuantitativeQualitativeEstimation::new(3).unwrap();
        let bar1 = Bar::new().close(8);
        let bar2 = Bar::new().close(5);
        assert_eq!(qqe.next(&bar1), 8.0);
        assert_eq!(qqe.next(&bar2), 4.0);
    }

    #[test]
    fn test_reset() {
        let mut qqe = QuantitativeQualitativeEstimation::new(5).unwrap();

        assert_eq!(qqe.next(4.0), 4.0);
        qqe.next(10.0);
        qqe.next(15.0);
        qqe.next(20.0);
        assert_ne!(qqe.next(4.0), 4.0);

        qqe.reset();
        assert_eq!(qqe.next(4.0), 4.0);
    }

    #[test]
    fn test_default() {
        QuantitativeQualitativeEstimation::default();
    }

    #[test]
    fn test_display() {
        let qqe = QuantitativeQualitativeEstimation::new(7).unwrap();
        assert_eq!(format!("{}", qqe), "QQE(7)");
    }
}
